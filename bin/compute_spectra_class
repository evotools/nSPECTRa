#!/usr/bin/env python
import sys
import numpy as np

def revert_mutation(mutation):
    table = { "A": "T",
            "T":"A",
            "G":"C",
            "C":"G"
            }
    initial, final = mutation.split('>')
    initial = ''.join([ table.get(i, i) for i in initial[::-1] ])
    final =   ''.join([ table.get(i, i) for i in final[::-1] ])
    return "{}>{}".format(initial, final)

def import_mutcat(mutcat, nsamples):
    #return { "{0}{2}{1}>{0}{3}{1}".format( line[0], line[2], line[4], line[6] ): np.zeros(nsamples, dtype = 'int64') for n, line in enumerate(open(mutcat)) if n > 0 }
    return { line.strip(): np.zeros(nsamples, dtype = 'int64') for n, line in enumerate(open(mutcat)) if n > 0 and line.strip() != '' }

if '.gz' in sys.argv[1]:
    import gzip
    infile = gzip.open(sys.argv[1])
elif '-' in sys.argv[1]:
    infile = sys.stdin
else:
    infile = open(sys.argv[1])

samples = [ i.strip() for n,i in enumerate(open(sys.argv[2])) if n >= 4 ]
# mutcat = import_mutcat(sys.argv[3], len(samples))
dataset = {}
csqs = []

# Start process changes
for n, line in enumerate(infile):
    try: line = line.decode()
    except: line = line
    line = line.strip().split()
    mutype = line[2]
    csq = line[3]
    vals = np.array([ 1 if '1' in i else 0 for i in line[4:] ], dtype = 'int64')
    if mutype not in dataset.keys():
        dataset[mutype] = {}
    if csq not in dataset[mutype].keys():
        dataset[ mutype ][ csq ] = vals
    else:
        dataset[ mutype ][ csq ] += vals
    if csq not in csqs: csqs.append(csq)
    if n%1000000 == 0: sys.stderr.write( "Last position: {}:{}\n".format(line[0], line[1]) )

# Load all changes
changes = []
for n, line in enumerate(open(sys.argv[3])):
    if n == 0 or len(line.strip()) == 0: continue
    changes.append(line.strip())

print( '\t'.join( ['Change', 'CSQ'] + samples ) )
for change in changes:
    for csq in csqs:
        try: outline = [change, csq] + list( map( str, dataset[change][csq] ) )
        except: outline = [change, csq] + ['0' for i in range(0, len(samples))]
        print( '\t'.join(outline) )

sys.stderr.write( "All done\n" )