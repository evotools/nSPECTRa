#!/usr/bin/env python
import gzip
import sys
import pysam

MAPPING = {
    "0/0": "0",
    "0|0": "0",
    "1|0": "1",
    "0|1": "1",
    "1|1": "1",
    "1/1": "1",
    "0/1": "1",
}


def parse_args():
    import argparse

    # Argument definition
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-i",
        "--input",
        metavar="input.vcf(.gz)",
        type=str,
        help="Input VCF file to process",
        dest="input",
        required=True,
    )
    parser.add_argument(
        "-o",
        "--out",
        metavar="prefix",
        type=str,
        help="Output file.",
        dest="out",
        required=False,
        default="output.tsv",
    )
    parser.add_argument("--csq", action="store_true", help="Save consequences.")
    parser.add_argument(
        "--region",
        metavar="chr:start-end",
        type=str,
        help="Target region in the format chrom:start-end.",
        dest="region",
        required=False,
    )
    return parser.parse_args()


def get_region(region_str):
    """Parse a region string.

    Chromosome is the bare minimum provided to the script.
    We therefore set start to a very high values, and end to 0,
    assuming all sites are considered otherwise specified.
    """
    region = {"chrom": None, "start": 0, "end": 9999999999}
    if not region_str:
        return region
    if region_str.count(":") > 1 or region_str.count("-") > 1:
        raise ValueError(
            f"Input region {region_str} does not match format: chrom:start-end"
        )
    if ":" not in region_str:
        chrom = region_str
        start = None
        end = None
    else:
        chrom, bases = region_str.split(":")
        if "-" in bases:
            start, end = map(int, bases.split("-"))
        else:
            start = int(bases)
            end = None
    region = {"chrom": chrom, "start": start, "end": end}
    return region


def main():
    """Run entry point."""
    # Parse arguments
    args = parse_args()

    # Get region
    if args.region:
        region = get_region(args.region)

    if "gz" in args.out:
        handler = gzip.open(args.out, "w")
    elif args.out == "-":
        handler = sys.stdout
    else:
        handler = open(args.out, "w")

    vcf = pysam.VariantFile(args.input)

    # Save header first
    header = "CHROM\tPOS\tCHANGE\t"
    if args.csq:
        header += "CSQ\t"
    header += "\t".join(list(vcf.header.samples))

    region_processed = False
    with handler as outfile:
        outfile.write(f"{header}\n")
        for site in vcf:
            # If a region is provided, then check that the site is not
            # outside it. If it is, check if the region has been processed,
            # and if so interrupt the script.
            if region:
                if (
                    site.chrom != region["chrom"]
                    or site.pos < region["start"]
                    or site.pos > region["end"]
                ):
                    if region_processed:
                        break
                    else:
                        continue
            outline = f"{site.chrom}\t{site.pos}\t{site.info['mutation_type'][0]}"
            gts = "\t".join(
                ["1" if 1 in s["GT"] else "0" for s in site.samples.values()]
            )
            if args.csq:
                csqs = site.info["CSQ"]
                for csq in csqs:
                    consequence = csq.split("|")[1]
                    outfile.write(f"{outline}\t{consequence}\t{gts}\n")
            else:
                outfile.write(f"{outline}\t{gts}\n")
            region_processed = True

    sys.stderr.write("All done\n")


if __name__ == "__main__":
    main()
