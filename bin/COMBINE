#!/usr/bin/env python
from collections import Counter
import os

import numpy as np
import polars as pl
from pysam import FastaFile



def parse_args():
    """Define arguments."""
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("-b", "--bed", metavar = 'ancestral_bed.bed', type = str, help = 'Input ancestral bed file',\
                            dest = 'bed', required = True)
    parser.add_argument("-f", "--fasta", metavar = 'reference.fasta', type = str, help = 'Input fasta file',\
                            dest = 'fasta', required = True)
    parser.add_argument("-t", "--threads", metavar = 'N', type = int, help = 'Number of threads; defaults all of them',\
                            dest = 'threads', required = False)
    parser.add_argument("-o", "--out", metavar = 'prefix', type = str, help = 'Output file.',\
                            dest = 'out', required = False, default = "myanc.fa")
    return parser.parse_args()


# Define consensus allele
def consense_query(input_alleles):
    input_alleles = input_alleles.upper().replace('N', '-').replace('.', '-')
    ref = input_alleles[0]
    cnt_full = Counter(input_alleles)
    cnt_alts = Counter(input_alleles[1:])
    candidate = cnt_alts.most_common()
    second = cnt_full.most_common()
    # Refine logic
    if ref == '-' or list(cnt_alts.keys()) == ['-'] or list(cnt_full.keys()) == ['-']:
        return('-')
    if len(candidate) == 1:
        return(candidate[0][0])
    if len(candidate) >= 2 and candidate[0][1] > candidate[1][1]:
        return(candidate[0][0] if len(candidate) == 2 else candidate[0][0].lower())
    if len(candidate) >= 2 and second[0][1] > second[1][1]:
        return(second[0][0].lower())
    return('-')


# Main function
def main():
    args = parse_args()

    # Define thread pool
    if args.threads:
        os.environ["POLARS_MAX_THREADS"] = f"{args.threads}"

    # Get reference nucleotides
    reference = FastaFile(args.fasta)
    reference = pl.DataFrame({'chrom': '24', 'start': range(0, len(reference['24'])), 'ref': tuple(reference['24']) })

    # Import data
    header = ['chrom', 'start', 'end', 'val']
    df = pl.read_csv(args.bed, has_header=False, new_columns=header, separator='\t').cast({'chrom': str})

    # Combine bases for same position
    df = df.group_by(('chrom', 'start', 'end')).agg(pl.col("val").str.concat(""))

    # Sort positions
    df = df.sort(by=('chrom', 'start'))

    # Add reference bases
    df = df.join(reference, on=("chrom", "start"), how="left")

    # Add reference base, then drop the ref col
    df = df.with_columns(val=pl.concat_str(pl.col('ref'), pl.col('val'))).drop("ref")
    
    # Get consensed value
    df = df.with_columns(con = pl.col('val').map_elements(lambda x: consense_query(x), return_dtype=str, strategy='threading'))

    # Save data
    df.write_csv(args.out, separator='\t', include_header=False)
    return 0

if __name__ == "__main__":
    main()