#!/usr/bin/env python
import sys
import numpy as np
import pyfaidx
from shutil import copyfile

def parse_args():
    import argparse
    # Argument definition
    parser = argparse.ArgumentParser()
    parser.add_argument("-b", "--bed", metavar = 'ancestral_bed.bed', type = str, help = 'Input ancestral bed file',\
                            dest = 'bed', required = True)
    parser.add_argument("-f", "--fasta", metavar = 'reference.fasta', type = str, help = 'Input fasta file',\
                            dest = 'fasta', required = True)
    parser.add_argument("-o", "--out", metavar = 'prefix', type = str, help = 'Output file.',\
                            dest = 'outname', required = False, default = "myanc.fa")
    return parser.parse_args()

# Bed parser
def parse_bed(bed):
    if "stdin" in bed or bed == "-":
        inbed = sys.stdin
    else:
        inbed = open(bed)
    for line in inbed:
        line = line.strip().split()
        if len(line[-1]) != line[-1].count("-"): 
            yield [ line[0], int(line[1]), int(line[2]), line[3] ]

# Bed to positions
def bedtopos(interval):
    for i in range(interval[1], interval[2]):
        if interval[-1][i - interval[1]] != "-": 
            yield [ interval[0], str(i), str(i+1), interval[-1][i - interval[1]] ]

# Parse fai
def parse_fai(fai):
    return { line.split()[0]: int(line.split()[1]) for line in open(fai) }

# Define consensus allele
def consense_query(input_alleles):
    seqs = np.array(list(input_alleles))
    values, counts = np.unique(np.char.upper(seqs), return_counts=True)
    maxallele = np.max(counts)
    if np.sum(counts == maxallele) == 1:
        alleles = seqs[ np.char.upper(seqs) == values[ counts == maxallele ] ]
        return alleles[0].upper() if np.sum(np.char.isupper(alleles)) > np.sum(np.char.islower(alleles)) else alleles[0].lower()
    else:
        return "-"
            

# Main function
def main():
    args = parse_args()

    # Get reference file
    reference = pyfaidx.Fasta(args.fasta, read_ahead=6000000000, mutable=False)

    # Parse bed file and get multiple bases
    itv0 = []
    for itv in parse_bed(args.bed):
        if itv0 == []: 
            r_allele = str(reference[ itv[0] ][ itv[1] ])
            a_allele = itv[-1]
            itv[-1] = r_allele + a_allele 
            itv0 = itv
            continue
        elif itv0[0] != itv[0] or itv0[1] != itv[1]:
            print( '\t'.join([ itv0[0], str(itv0[1]), str(itv0[2]), itv0[-1] ]) )
            r_allele = str(reference[ itv[0] ][ itv[1] ])
            a_allele = itv[-1]
            itv[-1] = r_allele + a_allele
            itv0 = itv
            continue
        else:
            if itv[0] == itv0[0] and itv[1] == itv0[1]:
                itv0[-1] = itv0[-1] + itv[-1]
                continue
    if len(itv0) != 0: print( '\t'.join([ itv0[0], str(itv0[1]), str(itv0[2]), itv0[-1] ]) )


    # make a copy to build our ancestor for this chromosome
    # print(f"Copy {args.fasta}...")
    # copyfile(args.fasta, args.outname)
    # anc = pyfaidx.Fasta(args.outname, read_ahead=10000, mutable=True)

    # Generate sequences
    

    # Process bed
    return 0

if __name__ == "__main__":
    main()