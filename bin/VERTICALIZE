#!/usr/bin/env python
from collections import Counter
import logging
import os
import sys

import polars as pl
from pysam import FastaFile


def parse_args():
    """Define arguments."""
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-b",
        "--bed",
        metavar="ancestral_bed.bed",
        type=str,
        help="Input ancestral bed file",
        dest="bed",
        required=True,
    )
    parser.add_argument(
        "-f",
        "--fasta",
        metavar="reference.fasta",
        type=str,
        help="Input fasta file",
        dest="fasta",
        required=True,
    )
    parser.add_argument(
        "-r",
        "--region",
        metavar="str",
        type=str,
        help="Sequence ID to process",
        dest="region",
        required=True,
    )
    parser.add_argument(
        "-t",
        "--threads",
        metavar="N",
        type=int,
        help="Number of threads; defaults all of them",
        dest="threads",
        required=False,
    )
    parser.add_argument(
        "-g", "--greedy", action="store_true", help="Run in greedy mode.", dest="greedy"
    )
    parser.add_argument(
        "-o",
        "--out",
        metavar="prefix",
        type=str,
        help="Output file.",
        dest="out",
        required=False,
        default="myanc.fa",
    )
    return parser.parse_args()


# Main function
def main():
    # Import arguments
    args = parse_args()

    # Define logger
    global _log_name
    _log_name = 'CONSENSE'
    logging.basicConfig(
        format="[%(asctime)s - %(name)s] %(message)s",
        datefmt="%H:%M:%S",
        level=logging.INFO,
    )
    logger = logging.getLogger(_log_name)

    # Define thread pool
    if args.threads:
        logger.info(f"Setting threads to: {args.threads}")
        os.environ["POLARS_MAX_THREADS"] = f"{args.threads}"

    # Load the BED file
    logging.info("Loading bed")
    df = (
        pl.read_csv(
            args.bed,
            has_header=False,
            separator="\t",
            new_columns=["chrom", "start", "end", "val"],
        )
        .cast({"chrom": str, "start": int, "end": int, "val": str})
        .filter(pl.col("chrom") == args.region)
        .drop(["chrom"]) # We do not need chromosome info, as we use a single contig at the time
    )

    # Verticalize the dataset
    logging.info("Verticalizing")
    df = (
        df.with_columns(
            val=pl.col("val").str.split(by=""),
            start=pl.int_ranges("start", "end"),
        )
        .explode(["start", "val"])
        .drop(['end'])
        .filter(pl.col("val") != "-")
        .sort(by=("start"))
    )

    # Save data
    df.write_csv(args.out, separator="\t", include_header=True)
    logging.info("Done")
    return 0


if __name__ == "__main__":
    main()
