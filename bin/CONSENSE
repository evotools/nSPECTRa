#!/usr/bin/env python
import sys
import numpy as np
from shutil import copyfile

def parse_args():
    import argparse
    # Argument definition
    parser = argparse.ArgumentParser()
    parser.add_argument("-b", "--bed", metavar = 'ancestral_bed.bed', type = str, help = 'Input ancestral bed file',\
                            dest = 'bed', required = True)
    parser.add_argument("-o", "--out", metavar = 'prefix', type = str, help = 'Output file.',\
                            dest = 'outname', required = False, default = "myanc.fa")
    return parser.parse_args()

# Bed parser
def parse_bed(bed):
    if "stdin" in bed or bed == "-":
        inbed = sys.stdin
    else:
        inbed = open(bed)
    for line in inbed:
        line = line.strip().split()
        if len(line[-1]) != line[-1].count("-"): 
            yield [ line[0], int(line[1]), int(line[2]), line[3] ]

# Bed to positions
def bedtopos(interval):
    for i in range(interval[1], interval[2]):
        if interval[-1][i - interval[1]] != "-": 
            yield [ interval[0], str(i), str(i+1), interval[-1][i - interval[1]] ]

# Parse fai
def parse_fai(fai):
    return { line.split()[0]: int(line.split()[1]) for line in open(fai) }

# Define consensus allele
def consense_query(input_alleles):
    seqs = np.array(list(input_alleles))
    r_allele, a_alleles = seqs[0], seqs[1:]
    a_alleles = a_alleles[np.char.upper(a_alleles) != "N"]
    # if all alleles are N, return "-"
    if len(a_alleles) == 0:
        return "-"
    values, counts = np.unique(np.char.upper(a_alleles), return_counts=True)
    maxallele = np.max(counts)
    if len(values) == 1: 
        return values[0].upper()
    elif len(values) > 1 and len(values) <= 2:
        if np.sum(counts == maxallele) == 1:
            alleles = a_alleles[ np.char.upper(a_alleles) == values[ counts == maxallele ] ]
            return alleles[0].upper()
        elif np.sum(counts == maxallele) == 2 and r_allele.upper() in np.char.upper(a_alleles[ np.in1d(np.char.upper(a_alleles), values[counts == maxallele]) ]):
            return r_allele.lower()
        else:
            return "-"
    else:
        if np.sum(counts == maxallele) == 1:
            alleles = a_alleles[ np.char.upper(a_alleles) == values[ counts == maxallele ] ]
            return alleles[0].lower()
        elif np.sum(counts == maxallele) == 2 and r_allele.upper() in np.char.upper(a_alleles[ np.in1d(np.char.upper(a_alleles), values[counts == maxallele]) ]):
            return r_allele.lower()
        else:
            return "-"
        return "-"
            

# Main function
def main():
    args = parse_args()

    # Parse bed file and get multiple bases
    for itv in parse_bed(args.bed):
        print( '\t'.join([ itv[0], str(itv[1]), str(itv[2]), itv[-1], consense_query(np.array(list(itv[-1]))) ]) )
        

    # make a copy to build our ancestor for this chromosome
    # print(f"Copy {args.fasta}...")
    # copyfile(args.fasta, args.outname)
    # anc = pyfaidx.Fasta(args.outname, read_ahead=10000, mutable=True)

    # Generate sequences
    

    # Process bed
    return 0

if __name__ == "__main__":
    main()