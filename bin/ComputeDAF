#!/usr/bin/env python
import pysam
import sys

revert = {
    "A": "T",
    "T": "A",
    "G": "C",
    "C": "G",
}


def parse_args():
    import argparse

    # Argument definition
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-v",
        "--vcf",
        metavar="input.vcf(.gz)",
        type=str,
        help="Input VCF file",
        dest="vcf",
        required=True,
    )
    return parser.parse_args()


# Main function
def main():
    args = parse_args()

    # Get reference file
    in_vcf = pysam.VariantFile(args.vcf)

    # Create new header
    in_vcf.header.add_line(
        '##INFO=<ID=DAF,Number=A,Type=Float,Description="Estimated derived allele frequency in the range (0,1]">'
    )
    sys.stdout.write(str(in_vcf.header))

    # Compute DAF using AF and AA information.
    # if AA == REF || REV(AA) == REF > DAF == AF
    # if AA != REF && REV(AA) != REF > DAF == 1-AF
    for site in in_vcf:
        ref = site.ref.upper()
        alt = site.alts[0].upper()
        aa = site.info.get("AA").upper()
        af = site.info.get("AF")[0]
        # If no AA avalable, emit site and proceed.
        if not aa:
            sys.stdout.write(str(site))
            continue
        if aa == ref:
            daf = af
        elif aa == alt:
            daf = 1 - af
        elif aa == revert.get(ref):
            daf = af
        else:
            daf = 1 - af
        site.info.update({"DAF": daf})
        sys.stdout.write(str(site))

    # Process bed
    return 0


if __name__ == "__main__":
    main()
