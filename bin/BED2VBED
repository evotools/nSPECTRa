#!/usr/bin/env python
import sys
import numpy as np

def parse_args():
    import argparse
    # Argument definition
    parser = argparse.ArgumentParser()
    parser.add_argument("-b", "--bed", metavar = 'ancestral_bed.bed', type = str, help = 'Input ancestral bed file',\
                            dest = 'bed', required = True)
    parser.add_argument("-f", "--fasta", metavar = 'fastafile', type = str, help = 'Genome file',\
                            dest = 'fasta', required = False, default = None)
    parser.add_argument("-o", "--out", metavar = 'prefix', type = str, help = 'Output file.',\
                            dest = 'outname', required = False, default = "myanc.fa")
    return parser.parse_args()

# Bed parser
def parse_bed(bed):
    for line in open(bed):
        line = line.strip().split()
        yield [ line[0], int(line[1]), int(line[2]), line[3] ]

# Bed to positions
def bedtopos(interval):
    bpi = np.arange(interval[1], interval[2])
    bpe = bpi + 1
    chars = np.array(tuple(interval[-1]))
    chroms = np.full(chars.shape[0], interval[0])
    yield np.vstack((chroms, bpi, bpe, chars)).T[chars != '-', :]

# Parse fai
def parse_fai(fai):
    return { line.split()[0]: int(line.split()[1]) for line in open(fai) }

# Main function
def main():
    args = parse_args()

    # Parse bed file and get multiple bases
    with open(args.outname, 'w') as output:
        for itv in parse_bed(args.bed):
            for itvs in bedtopos(itv):
                np.savetxt(output, itvs, delimiter='\t', fmt = '%.120s')

    # Process bed
    return 0

if __name__ == "__main__":
    main()