#!/usr/bin/env python

#####
#
# Created by: Andrea Talenti
# Date: 20 Feb, 2020
#
# Script that create a fasta or bed files
# the initial reference-based maf files.
# MAF files have to be created starting from
# the output hal file generated from CACTUS.
# Conversion from hal to maf with hal2maf tool.
#
#####
import numpy as np
import sys, os

revert = {
    "A": "T",
    "T": "A",
    "C": "G",
    "G": "C",
    "a": "t",
    "t": "a",
    "c": "g",
    "g": "c",
}


# Define reference and target sequences
def get_ref(lines, seq):
    rname = lines[0].strip().split()[1].split(".")[0]  # Get reference names
    if seq is not None:  # If target sequence is provided, focus on that.
        references = [line for line in lines if seq in line.split()[1]]
        queries = [line for line in lines if "Anc" in line or "Inner" in line]
    else:  # Otherwise keep all that share the first (ref) line spp.
        references = [
            line for line in lines if "Anc" not in line and "Inner" not in line
        ]
        queries = [line for line in lines if "Anc" in line or "Inner" in line]
    return (
        references,
        queries,
    )  # Return reference-spp name and list of ref and target sequences.


# High memory worker (keep in memory)
def worker(inputs):
    # Extract inputs from tuple
    lines, ctr = inputs
    # Get sequences information
    references, queries = get_ref(lines, None)
    ref_seq_id = references[0].strip().split()[1]
    if len(references) == 0:
        return ""

    result = []

    for r in references:
        stringa = r + "".join(queries)
        result += ["a\n" + stringa.strip()]

    if ctr % 10000 == 0:
        sys.stderr.write("Processed chunk {}\n".format(ctr))
    return "\n\n".join(result)


def reader(args):
    lines = []
    blocks = []
    infile = open(args.maf)
    for line in infile:
        if "#" in line:
            continue
        elif line[0] == "a":
            continue
        elif line[0] == "s":
            lines.append(line)
            continue
        elif line.strip() == "" and len(lines) != 0:
            blocks.append(lines)
            lines = []
        else:
            lines = []
    if len(lines) != 0:
        blocks.append(lines)
    return blocks


def single_proc(funct, chunk):
    return [funct((block, n)) for n, block in enumerate(chunk)]


def Pipeline(blocks, args):
    sys.stderr.write("Start processing the data\n")
    dat = single_proc(worker, blocks)

    # Create output
    fmt = "maf"
    # Create temporary file
    sys.stderr.write("Save new maf file...\n")
    if (args.outname == "stdout" or "-" in args.outname) and "," not in args.ofmt:
        of = sys.stdout
    else:
        if "stdout" in args.outname or "-" in args.outname:
            sys.stderr.write(
                "Cannot print to stdout if multiple output formats are required\n"
            )
            args.outname = "fastafile"
        of = open("{}.{}".format(args.outname, fmt), "w")
    of.write("\n\n".join(["##maf version=1 scoring=N/A"] + dat))
    of.close()
    return 0


def parse_args():
    import argparse

    # Argument definition
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-m",
        "--maf",
        metavar="maffile.maf",
        type=str,
        help="Input alignments",
        dest="maf",
        required=True,
    )
    parser.add_argument(
        "-o",
        "--out",
        metavar="prefix",
        type=str,
        help="Output file prefix.",
        dest="outname",
        required=False,
        default="myanc",
    )
    parser.add_argument(
        "-O",
        "--OutFmt",
        metavar="fasta/bed",
        type=str,
        help="Output file format (fasta/bed).",
        dest="ofmt",
        required=False,
        default="fasta",
    )

    return parser.parse_args()


def parse_fasta_length(fasta):
    values = {}
    for line in open(fasta):
        if ">" in line:
            ctgid = line.strip().replace(">", "").split()[0]
            values[ctgid] = 0
            continue
        values[ctgid] += len(line.strip())
    return values


def main():
    import time
    from subprocess import Popen

    args = parse_args()
    # Set environment number of variables
    os.environ["OMP_NUM_THREADS"] = "1"

    sys.stderr.write("Reading alignments blocks and chunking it...\n")
    blocks = reader(args)

    s_time = time.time()
    Pipeline(blocks, args)

    sys.stderr.write("All done in {}s\n".format(time.time() - s_time))
    return 0


if __name__ == "__main__":
    main()
