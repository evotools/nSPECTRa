#! /usr/bin/env python
import argparse
import sys
from collections import defaultdict, Counter
import pandas as pd
import signal
import numpy as np
from shutil import copyfile
import pyfaidx
from random import choice
from pyliftover import LiftOver
from Bio.Seq import reverse_complement

def fasta_lengths(fasta):
    return {key: len(fasta[key]) for key in fasta.keys()}

def ancestral_fasta(reference, outgroup, chain, output):
    """subroutine for ancestor subcommand
    """
    # single chromosome fasta file for reference genome
    print(f"Read {reference}...")
    ref = pyfaidx.Fasta(reference, read_ahead=10000)
    # make a copy to build our ancestor for this chromosome
    print(f"Copy {reference}...")
    copyfile(reference, output)
    anc = pyfaidx.Fasta(output, read_ahead=10000, mutable=True)
    # reference genome for outgroup species (all chromosomes)
    print(f"Read {outgroup}...")
    out = pyfaidx.Fasta(outgroup, read_ahead=10000)
    # outgroup to reference alignment chain file
    print(f"Read {chain}...")
    lo = LiftOver(chain)

    # # change regions outside of callability mask to all N bases
    # if args.bed:
    #     if args.bed == '-':
    #         bed = sys.stdin
    #     else:
    #         bed = open(args.bed, 'r')
    #     last_end = 0
    #     for line in bed:
    #         chrom, start, end = line.rstrip().split('\t')[:3]
    #         start = int(start)
    #         anc[chrom][last_end:start] = 'N' * (start - last_end)
    #         last_end = int(end)
    #     anc[chrom][last_end:
    #                len(anc[chrom])] = 'N' * (len(anc[chrom]) - last_end)

    # Get sequence lengths
    lengths = fasta_lengths(ref)

    for chrom, seq_l in lengths.items():
        print(f"Start chromosome: {chrom}")
        for start in range(0, seq_l):
            REF = ref[chrom][start]
            # change variants that are not biallelic SNPs to N bases
            out_coords = lo.convert_coordinate(chrom, start)
            # change ambiguously aligning sites to N bases
            if out_coords is None or len(out_coords) != 1:
                anc[chrom][start] = 'N'
            else:
                out_chromosome, out_position, out_strand = out_coords[0][:3]
                out_allele = out[out_chromosome][out_position].seq
                                # if negative strand, take reverse complement base
                if out_strand == '-':
                    out_allele = reverse_complement(out_allele)
                # and finally, polarize
                anc[chrom][start] = out_allele
            if start % 100000 == 0: print(f"Bp for {chrom}: {start}")

            
if __name__ == "__main__":
    reference=sys.argv[1]
    outgroup=sys.argv[2]
    chain=sys.argv[3]
    output=sys.argv[4]
    ancestral_fasta(reference, outgroup, chain, output)