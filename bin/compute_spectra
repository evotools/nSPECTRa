#!/usr/bin/env python
import numpy as np
from pysam import VariantFile

def import_mutcat(mutcat, nsamples):
    return {
        line.strip(): np.zeros(nsamples, dtype = 'uint64')
        for n, line in enumerate(open(mutcat))
        if n > 0 and line.strip() != ''
    }


def parse_args():
    import argparse
    # Argument definition
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-i",
        "--input",
        metavar="input.vcf",
        type=str,
        help="Input vcf",
        dest="input",
        required=True,
    )
    parser.add_argument("-k", "--kmers", metavar = 'kmers.txt', type = str, help = 'Kmers list (with header)',\
                            required = False, default = None)
    parser.add_argument("-o", "--out", metavar = 'prefix', type = str, help = 'Output file.',\
                            required = False, default = "myanc.fa")
    parser.add_argument("--all", action='store_true', help = 'Add missing change-by-consequence combinations to the output dataframe.')
    return parser.parse_args()


def main():
    """Run entry point."""
    # Parse arguments
    args = parse_args()

    with VariantFile(args.input) as vcf:
        # Get set of mutations
        samples = list(vcf.header.samples)
        header = '\t'.join( ['CHANGE'] + samples )
        dataset = import_mutcat( args.kmers, len(samples) )
        for line in vcf:
            mutype = line.info['mutation_type'][0]
            vals = np.array([1 if 1 in s["GT"] else 0 for s in line.samples.values()], dtype='uint64')
            dataset[ mutype ] += vals

    # Save output
    with open(args.out, 'w') as outfile:
        outfile.write(header + '\n')
        for change, vals in dataset.items():
            outline = f"{change}\t" + '\t'.join(vals.astype('U32'))
            outfile.write(outline + '\n')


if __name__ == '__main__':
    main()